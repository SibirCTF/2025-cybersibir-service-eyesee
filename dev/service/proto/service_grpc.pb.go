// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: protocols/service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EyeSeeService_ServiceHealthCheck_FullMethodName = "/service.proto.EyeSeeService/ServiceHealthCheck"
	EyeSeeService_AddPrescription_FullMethodName    = "/service.proto.EyeSeeService/AddPrescription"
	EyeSeeService_GetPrescriptionIDs_FullMethodName = "/service.proto.EyeSeeService/GetPrescriptionIDs"
	EyeSeeService_CheckPrescription_FullMethodName  = "/service.proto.EyeSeeService/CheckPrescription"
	EyeSeeService_Debugger_FullMethodName           = "/service.proto.EyeSeeService/Debugger"
)

// EyeSeeServiceClient is the client API for EyeSeeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EyeSeeServiceClient interface {
	ServiceHealthCheck(ctx context.Context, in *ServiceHealthCheckRequest, opts ...grpc.CallOption) (*ServiceHealthCheckResponse, error)
	AddPrescription(ctx context.Context, in *AddPrescriptionRequest, opts ...grpc.CallOption) (*AddPrescriptionResponse, error)
	GetPrescriptionIDs(ctx context.Context, in *GetPrescriptionIDsRequest, opts ...grpc.CallOption) (*GetPrescriptionIDsResponse, error)
	CheckPrescription(ctx context.Context, in *CheckPrescriptionRequest, opts ...grpc.CallOption) (*CheckPrescriptionResponse, error)
	Debugger(ctx context.Context, in *DebuggerRequest, opts ...grpc.CallOption) (*DebuggerResponse, error)
}

type eyeSeeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEyeSeeServiceClient(cc grpc.ClientConnInterface) EyeSeeServiceClient {
	return &eyeSeeServiceClient{cc}
}

func (c *eyeSeeServiceClient) ServiceHealthCheck(ctx context.Context, in *ServiceHealthCheckRequest, opts ...grpc.CallOption) (*ServiceHealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ServiceHealthCheckResponse)
	err := c.cc.Invoke(ctx, EyeSeeService_ServiceHealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eyeSeeServiceClient) AddPrescription(ctx context.Context, in *AddPrescriptionRequest, opts ...grpc.CallOption) (*AddPrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddPrescriptionResponse)
	err := c.cc.Invoke(ctx, EyeSeeService_AddPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eyeSeeServiceClient) GetPrescriptionIDs(ctx context.Context, in *GetPrescriptionIDsRequest, opts ...grpc.CallOption) (*GetPrescriptionIDsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPrescriptionIDsResponse)
	err := c.cc.Invoke(ctx, EyeSeeService_GetPrescriptionIDs_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eyeSeeServiceClient) CheckPrescription(ctx context.Context, in *CheckPrescriptionRequest, opts ...grpc.CallOption) (*CheckPrescriptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckPrescriptionResponse)
	err := c.cc.Invoke(ctx, EyeSeeService_CheckPrescription_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eyeSeeServiceClient) Debugger(ctx context.Context, in *DebuggerRequest, opts ...grpc.CallOption) (*DebuggerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DebuggerResponse)
	err := c.cc.Invoke(ctx, EyeSeeService_Debugger_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EyeSeeServiceServer is the server API for EyeSeeService service.
// All implementations must embed UnimplementedEyeSeeServiceServer
// for forward compatibility.
type EyeSeeServiceServer interface {
	ServiceHealthCheck(context.Context, *ServiceHealthCheckRequest) (*ServiceHealthCheckResponse, error)
	AddPrescription(context.Context, *AddPrescriptionRequest) (*AddPrescriptionResponse, error)
	GetPrescriptionIDs(context.Context, *GetPrescriptionIDsRequest) (*GetPrescriptionIDsResponse, error)
	CheckPrescription(context.Context, *CheckPrescriptionRequest) (*CheckPrescriptionResponse, error)
	Debugger(context.Context, *DebuggerRequest) (*DebuggerResponse, error)
	mustEmbedUnimplementedEyeSeeServiceServer()
}

// UnimplementedEyeSeeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEyeSeeServiceServer struct{}

func (UnimplementedEyeSeeServiceServer) ServiceHealthCheck(context.Context, *ServiceHealthCheckRequest) (*ServiceHealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceHealthCheck not implemented")
}
func (UnimplementedEyeSeeServiceServer) AddPrescription(context.Context, *AddPrescriptionRequest) (*AddPrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPrescription not implemented")
}
func (UnimplementedEyeSeeServiceServer) GetPrescriptionIDs(context.Context, *GetPrescriptionIDsRequest) (*GetPrescriptionIDsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrescriptionIDs not implemented")
}
func (UnimplementedEyeSeeServiceServer) CheckPrescription(context.Context, *CheckPrescriptionRequest) (*CheckPrescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPrescription not implemented")
}
func (UnimplementedEyeSeeServiceServer) Debugger(context.Context, *DebuggerRequest) (*DebuggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Debugger not implemented")
}
func (UnimplementedEyeSeeServiceServer) mustEmbedUnimplementedEyeSeeServiceServer() {}
func (UnimplementedEyeSeeServiceServer) testEmbeddedByValue()                       {}

// UnsafeEyeSeeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EyeSeeServiceServer will
// result in compilation errors.
type UnsafeEyeSeeServiceServer interface {
	mustEmbedUnimplementedEyeSeeServiceServer()
}

func RegisterEyeSeeServiceServer(s grpc.ServiceRegistrar, srv EyeSeeServiceServer) {
	// If the following call pancis, it indicates UnimplementedEyeSeeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EyeSeeService_ServiceDesc, srv)
}

func _EyeSeeService_ServiceHealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServiceHealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EyeSeeServiceServer).ServiceHealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EyeSeeService_ServiceHealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EyeSeeServiceServer).ServiceHealthCheck(ctx, req.(*ServiceHealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EyeSeeService_AddPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EyeSeeServiceServer).AddPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EyeSeeService_AddPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EyeSeeServiceServer).AddPrescription(ctx, req.(*AddPrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EyeSeeService_GetPrescriptionIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrescriptionIDsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EyeSeeServiceServer).GetPrescriptionIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EyeSeeService_GetPrescriptionIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EyeSeeServiceServer).GetPrescriptionIDs(ctx, req.(*GetPrescriptionIDsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EyeSeeService_CheckPrescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPrescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EyeSeeServiceServer).CheckPrescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EyeSeeService_CheckPrescription_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EyeSeeServiceServer).CheckPrescription(ctx, req.(*CheckPrescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EyeSeeService_Debugger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DebuggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EyeSeeServiceServer).Debugger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EyeSeeService_Debugger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EyeSeeServiceServer).Debugger(ctx, req.(*DebuggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EyeSeeService_ServiceDesc is the grpc.ServiceDesc for EyeSeeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EyeSeeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.proto.EyeSeeService",
	HandlerType: (*EyeSeeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ServiceHealthCheck",
			Handler:    _EyeSeeService_ServiceHealthCheck_Handler,
		},
		{
			MethodName: "AddPrescription",
			Handler:    _EyeSeeService_AddPrescription_Handler,
		},
		{
			MethodName: "GetPrescriptionIDs",
			Handler:    _EyeSeeService_GetPrescriptionIDs_Handler,
		},
		{
			MethodName: "CheckPrescription",
			Handler:    _EyeSeeService_CheckPrescription_Handler,
		},
		{
			MethodName: "Debugger",
			Handler:    _EyeSeeService_Debugger_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocols/service.proto",
}
